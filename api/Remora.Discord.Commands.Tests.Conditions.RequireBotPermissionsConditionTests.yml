### YamlMime:ManagedReference
items:
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  commentId: T:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  id: RequireBotPermissionsConditionTests
  parent: Remora.Discord.Commands.Tests.Conditions
  children:
  - Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.#ctor
  - Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.Cases
  - Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsAdministratorPermission``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  - Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsGuildOwner``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  - Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  - Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  - Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  langs:
  - csharp
  - vb
  name: RequireBotPermissionsConditionTests
  nameWithType: RequireBotPermissionsConditionTests
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  type: Class
  source:
    id: RequireBotPermissionsConditionTests
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Tests\Remora.Discord.Commands.Tests\Conditions\RequireBotPermissionsConditionTests.cs
    startLine: 45
  assemblies:
  - Remora.Discord.Commands.Tests
  namespace: Remora.Discord.Commands.Tests.Conditions
  summary: Tests the <xref href="Remora.Discord.Commands.Conditions.RequireBotDiscordPermissionsCondition" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public class RequireBotPermissionsConditionTests
    content.vb: Public Class RequireBotPermissionsConditionTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.Cases
  commentId: P:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.Cases
  id: Cases
  parent: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  langs:
  - csharp
  - vb
  name: Cases
  nameWithType: RequireBotPermissionsConditionTests.Cases
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.Cases
  type: Property
  source:
    id: Cases
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Tests\Remora.Discord.Commands.Tests\Conditions\RequireBotPermissionsConditionTests.Cases.cs
    startLine: 31
  assemblies:
  - Remora.Discord.Commands.Tests
  namespace: Remora.Discord.Commands.Tests.Conditions
  summary: Gets the test cases.
  example: []
  syntax:
    content: public static IEnumerable<object[]> Cases { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Object[]}
    content.vb: Public Shared ReadOnly Property Cases As IEnumerable(Of Object())
  overload: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.Cases*
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.#ctor
  commentId: M:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.#ctor
  id: '#ctor'
  parent: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  langs:
  - csharp
  - vb
  name: RequireBotPermissionsConditionTests()
  nameWithType: RequireBotPermissionsConditionTests.RequireBotPermissionsConditionTests()
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RequireBotPermissionsConditionTests()
  type: Constructor
  source:
    id: .ctor
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Tests\Remora.Discord.Commands.Tests\Conditions\RequireBotPermissionsConditionTests.cs
    startLine: 60
  assemblies:
  - Remora.Discord.Commands.Tests
  namespace: Remora.Discord.Commands.Tests.Conditions
  summary: Initializes a new instance of the <xref href="Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public RequireBotPermissionsConditionTests()
    content.vb: Public Sub New()
  overload: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.#ctor*
  nameWithType.vb: RequireBotPermissionsConditionTests.New()
  fullName.vb: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.New()
  name.vb: New()
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsGuildOwner``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  commentId: M:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsGuildOwner``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  id: RespectsGuildOwner``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  parent: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  langs:
  - csharp
  - vb
  name: RespectsGuildOwner<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  nameWithType: RequireBotPermissionsConditionTests.RespectsGuildOwner<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsGuildOwner<TPermission>(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission[], Remora.Discord.API.Abstractions.Objects.DiscordPermission[], bool)
  type: Method
  source:
    id: RespectsGuildOwner
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Tests\Remora.Discord.Commands.Tests\Conditions\RequireBotPermissionsConditionTests.cs
    startLine: 149
  assemblies:
  - Remora.Discord.Commands.Tests
  namespace: Remora.Discord.Commands.Tests.Conditions
  summary: Tests whether the condition respects the owner of a guild having all permissions.
  example: []
  syntax:
    content: >-
      [Theory]

      [MemberData("Cases", new object[] { })]

      public Task RespectsGuildOwner<TPermission>(LogicalOperator logicalOperator, TPermission[] required, DiscordPermission[] effectivePermissions, bool expected) where TPermission : struct, Enum
    parameters:
    - id: logicalOperator
      type: Remora.Discord.Commands.Conditions.LogicalOperator
      description: The logical operator to apply.
    - id: required
      type: '{TPermission}[]'
      description: The permissions required by the condition.
    - id: effectivePermissions
      type: Remora.Discord.API.Abstractions.Objects.DiscordPermission[]
      description: The effective permissions.
    - id: expected
      type: System.Boolean
      description: The expected result.
    typeParameters:
    - id: TPermission
      description: The required permissions.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous unit test.
    content.vb: >-
      <Theory>

      <MemberData("Cases", New Object() { })>

      Public Function RespectsGuildOwner(Of TPermission As {Structure, [Enum]})(logicalOperator As LogicalOperator, required As TPermission(), effectivePermissions As DiscordPermission(), expected As Boolean) As Task
  overload: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsGuildOwner*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: RequireBotPermissionsConditionTests.RespectsGuildOwner(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
  fullName.vb: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsGuildOwner(Of TPermission)(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission(), Remora.Discord.API.Abstractions.Objects.DiscordPermission(), Boolean)
  name.vb: RespectsGuildOwner(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsAdministratorPermission``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  commentId: M:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsAdministratorPermission``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  id: RespectsAdministratorPermission``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  parent: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  langs:
  - csharp
  - vb
  name: RespectsAdministratorPermission<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  nameWithType: RequireBotPermissionsConditionTests.RespectsAdministratorPermission<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsAdministratorPermission<TPermission>(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission[], Remora.Discord.API.Abstractions.Objects.DiscordPermission[], bool)
  type: Method
  source:
    id: RespectsAdministratorPermission
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Tests\Remora.Discord.Commands.Tests\Conditions\RequireBotPermissionsConditionTests.cs
    startLine: 230
  assemblies:
  - Remora.Discord.Commands.Tests
  namespace: Remora.Discord.Commands.Tests.Conditions
  summary: Tests whether the condition respects the administrator permission.
  example: []
  syntax:
    content: >-
      [Theory]

      [MemberData("Cases", new object[] { })]

      public Task RespectsAdministratorPermission<TPermission>(LogicalOperator logicalOperator, TPermission[] required, DiscordPermission[] effectivePermissions, bool expected) where TPermission : struct, Enum
    parameters:
    - id: logicalOperator
      type: Remora.Discord.Commands.Conditions.LogicalOperator
      description: The logical operator to apply.
    - id: required
      type: '{TPermission}[]'
      description: The permissions required by the condition.
    - id: effectivePermissions
      type: Remora.Discord.API.Abstractions.Objects.DiscordPermission[]
      description: The effective permissions.
    - id: expected
      type: System.Boolean
      description: The expected result.
    typeParameters:
    - id: TPermission
      description: The required permissions.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous unit test.
    content.vb: >-
      <Theory>

      <MemberData("Cases", New Object() { })>

      Public Function RespectsAdministratorPermission(Of TPermission As {Structure, [Enum]})(logicalOperator As LogicalOperator, required As TPermission(), effectivePermissions As DiscordPermission(), expected As Boolean) As Task
  overload: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsAdministratorPermission*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: RequireBotPermissionsConditionTests.RespectsAdministratorPermission(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
  fullName.vb: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsAdministratorPermission(Of TPermission)(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission(), Remora.Discord.API.Abstractions.Objects.DiscordPermission(), Boolean)
  name.vb: RespectsAdministratorPermission(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  commentId: M:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  id: ReturnsCorrectResultForRolePermissions``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  parent: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  langs:
  - csharp
  - vb
  name: ReturnsCorrectResultForRolePermissions<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  nameWithType: RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions<TPermission>(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission[], Remora.Discord.API.Abstractions.Objects.DiscordPermission[], bool)
  type: Method
  source:
    id: ReturnsCorrectResultForRolePermissions
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Tests\Remora.Discord.Commands.Tests\Conditions\RequireBotPermissionsConditionTests.cs
    startLine: 274
  assemblies:
  - Remora.Discord.Commands.Tests
  namespace: Remora.Discord.Commands.Tests.Conditions
  summary: Tests whether the condition acknowledges and correctly evaluates role permissions.
  example: []
  syntax:
    content: >-
      [Theory]

      [MemberData("Cases", new object[] { })]

      public Task ReturnsCorrectResultForRolePermissions<TPermission>(LogicalOperator logicalOperator, TPermission[] required, DiscordPermission[] effectivePermissions, bool expected) where TPermission : struct, Enum
    parameters:
    - id: logicalOperator
      type: Remora.Discord.Commands.Conditions.LogicalOperator
      description: The logical operator to apply.
    - id: required
      type: '{TPermission}[]'
      description: The permissions required by the condition.
    - id: effectivePermissions
      type: Remora.Discord.API.Abstractions.Objects.DiscordPermission[]
      description: The effective permissions.
    - id: expected
      type: System.Boolean
      description: The expected result.
    typeParameters:
    - id: TPermission
      description: The required permissions.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous unit test.
    content.vb: >-
      <Theory>

      <MemberData("Cases", New Object() { })>

      Public Function ReturnsCorrectResultForRolePermissions(Of TPermission As {Structure, [Enum]})(logicalOperator As LogicalOperator, required As TPermission(), effectivePermissions As DiscordPermission(), expected As Boolean) As Task
  overload: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
  fullName.vb: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions(Of TPermission)(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission(), Remora.Discord.API.Abstractions.Objects.DiscordPermission(), Boolean)
  name.vb: ReturnsCorrectResultForRolePermissions(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  commentId: M:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  id: ReturnsCorrectResultForChannelRoleOverwrite``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  parent: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  langs:
  - csharp
  - vb
  name: ReturnsCorrectResultForChannelRoleOverwrite<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  nameWithType: RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite<TPermission>(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission[], Remora.Discord.API.Abstractions.Objects.DiscordPermission[], bool)
  type: Method
  source:
    id: ReturnsCorrectResultForChannelRoleOverwrite
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Tests\Remora.Discord.Commands.Tests\Conditions\RequireBotPermissionsConditionTests.cs
    startLine: 315
  assemblies:
  - Remora.Discord.Commands.Tests
  namespace: Remora.Discord.Commands.Tests.Conditions
  summary: Tests whether the condition acknowledges and correctly evaluates channel overwrites.
  example: []
  syntax:
    content: >-
      [Theory]

      [MemberData("Cases", new object[] { })]

      public Task ReturnsCorrectResultForChannelRoleOverwrite<TPermission>(LogicalOperator logicalOperator, TPermission[] required, DiscordPermission[] effectivePermissions, bool expected) where TPermission : struct, Enum
    parameters:
    - id: logicalOperator
      type: Remora.Discord.Commands.Conditions.LogicalOperator
      description: The logical operator to apply.
    - id: required
      type: '{TPermission}[]'
      description: The permissions required by the condition.
    - id: effectivePermissions
      type: Remora.Discord.API.Abstractions.Objects.DiscordPermission[]
      description: The effective permissions.
    - id: expected
      type: System.Boolean
      description: The expected result.
    typeParameters:
    - id: TPermission
      description: The required permissions.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous unit test.
    content.vb: >-
      <Theory>

      <MemberData("Cases", New Object() { })>

      Public Function ReturnsCorrectResultForChannelRoleOverwrite(Of TPermission As {Structure, [Enum]})(logicalOperator As LogicalOperator, required As TPermission(), effectivePermissions As DiscordPermission(), expected As Boolean) As Task
  overload: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
  fullName.vb: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite(Of TPermission)(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission(), Remora.Discord.API.Abstractions.Objects.DiscordPermission(), Boolean)
  name.vb: ReturnsCorrectResultForChannelRoleOverwrite(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  commentId: M:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  id: ReturnsCorrectResultForChannelMemberOverwrite``1(Remora.Discord.Commands.Conditions.LogicalOperator,``0[],Remora.Discord.API.Abstractions.Objects.DiscordPermission[],System.Boolean)
  parent: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  langs:
  - csharp
  - vb
  name: ReturnsCorrectResultForChannelMemberOverwrite<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  nameWithType: RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite<TPermission>(LogicalOperator, TPermission[], DiscordPermission[], bool)
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite<TPermission>(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission[], Remora.Discord.API.Abstractions.Objects.DiscordPermission[], bool)
  type: Method
  source:
    id: ReturnsCorrectResultForChannelMemberOverwrite
    path: D:\Projects\apps\Remora\documentation\src\Remora.Discord\Tests\Remora.Discord.Commands.Tests\Conditions\RequireBotPermissionsConditionTests.cs
    startLine: 369
  assemblies:
  - Remora.Discord.Commands.Tests
  namespace: Remora.Discord.Commands.Tests.Conditions
  summary: Tests whether the condition acknowledges and correctly evaluates user overwrites.
  example: []
  syntax:
    content: >-
      [Theory]

      [MemberData("Cases", new object[] { })]

      public Task ReturnsCorrectResultForChannelMemberOverwrite<TPermission>(LogicalOperator logicalOperator, TPermission[] required, DiscordPermission[] effectivePermissions, bool expected) where TPermission : struct, Enum
    parameters:
    - id: logicalOperator
      type: Remora.Discord.Commands.Conditions.LogicalOperator
      description: The logical operator to apply.
    - id: required
      type: '{TPermission}[]'
      description: The permissions required by the condition.
    - id: effectivePermissions
      type: Remora.Discord.API.Abstractions.Objects.DiscordPermission[]
      description: The effective permissions.
    - id: expected
      type: System.Boolean
      description: The expected result.
    typeParameters:
    - id: TPermission
      description: The required permissions.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> representing the asynchronous unit test.
    content.vb: >-
      <Theory>

      <MemberData("Cases", New Object() { })>

      Public Function ReturnsCorrectResultForChannelMemberOverwrite(Of TPermission As {Structure, [Enum]})(logicalOperator As LogicalOperator, required As TPermission(), effectivePermissions As DiscordPermission(), expected As Boolean) As Task
  overload: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite*
  attributes:
  - type: Xunit.TheoryAttribute
    ctor: Xunit.TheoryAttribute.#ctor
    arguments: []
  nameWithType.vb: RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
  fullName.vb: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite(Of TPermission)(Remora.Discord.Commands.Conditions.LogicalOperator, TPermission(), Remora.Discord.API.Abstractions.Objects.DiscordPermission(), Boolean)
  name.vb: ReturnsCorrectResultForChannelMemberOverwrite(Of TPermission)(LogicalOperator, TPermission(), DiscordPermission(), Boolean)
references:
- uid: Remora.Discord.Commands.Conditions.RequireBotDiscordPermissionsCondition
  commentId: T:Remora.Discord.Commands.Conditions.RequireBotDiscordPermissionsCondition
  href: Remora.Discord.Commands.Conditions.RequireBotDiscordPermissionsCondition.html
  name: RequireBotDiscordPermissionsCondition
  nameWithType: RequireBotDiscordPermissionsCondition
  fullName: Remora.Discord.Commands.Conditions.RequireBotDiscordPermissionsCondition
- uid: Remora.Discord.Commands.Tests.Conditions
  commentId: N:Remora.Discord.Commands.Tests.Conditions
  href: Remora.html
  name: Remora.Discord.Commands.Tests.Conditions
  nameWithType: Remora.Discord.Commands.Tests.Conditions
  fullName: Remora.Discord.Commands.Tests.Conditions
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Tests
    name: Tests
    href: Remora.Discord.Commands.Tests.html
  - name: .
  - uid: Remora.Discord.Commands.Tests.Conditions
    name: Conditions
    href: Remora.Discord.Commands.Tests.Conditions.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Tests
    name: Tests
    href: Remora.Discord.Commands.Tests.html
  - name: .
  - uid: Remora.Discord.Commands.Tests.Conditions
    name: Conditions
    href: Remora.Discord.Commands.Tests.Conditions.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.Cases*
  commentId: Overload:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.Cases
  href: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.html#Remora_Discord_Commands_Tests_Conditions_RequireBotPermissionsConditionTests_Cases
  name: Cases
  nameWithType: RequireBotPermissionsConditionTests.Cases
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.Cases
- uid: System.Collections.Generic.IEnumerable{System.Object[]}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<object[]>
  nameWithType: IEnumerable<object[]>
  fullName: System.Collections.Generic.IEnumerable<object[]>
  nameWithType.vb: IEnumerable(Of Object())
  fullName.vb: System.Collections.Generic.IEnumerable(Of Object())
  name.vb: IEnumerable(Of Object())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  commentId: T:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
  href: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.html
  name: RequireBotPermissionsConditionTests
  nameWithType: RequireBotPermissionsConditionTests
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.#ctor*
  commentId: Overload:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.#ctor
  href: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.html#Remora_Discord_Commands_Tests_Conditions_RequireBotPermissionsConditionTests__ctor
  name: RequireBotPermissionsConditionTests
  nameWithType: RequireBotPermissionsConditionTests.RequireBotPermissionsConditionTests
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RequireBotPermissionsConditionTests
  nameWithType.vb: RequireBotPermissionsConditionTests.New
  fullName.vb: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.New
  name.vb: New
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsGuildOwner*
  commentId: Overload:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsGuildOwner
  href: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.html#Remora_Discord_Commands_Tests_Conditions_RequireBotPermissionsConditionTests_RespectsGuildOwner__1_Remora_Discord_Commands_Conditions_LogicalOperator___0___Remora_Discord_API_Abstractions_Objects_DiscordPermission___System_Boolean_
  name: RespectsGuildOwner
  nameWithType: RequireBotPermissionsConditionTests.RespectsGuildOwner
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsGuildOwner
- uid: Remora.Discord.Commands.Conditions.LogicalOperator
  commentId: T:Remora.Discord.Commands.Conditions.LogicalOperator
  parent: Remora.Discord.Commands.Conditions
  href: Remora.Discord.Commands.Conditions.LogicalOperator.html
  name: LogicalOperator
  nameWithType: LogicalOperator
  fullName: Remora.Discord.Commands.Conditions.LogicalOperator
- uid: '{TPermission}[]'
  isExternal: true
  name: TPermission[]
  nameWithType: TPermission[]
  fullName: TPermission[]
  nameWithType.vb: TPermission()
  fullName.vb: TPermission()
  name.vb: TPermission()
  spec.csharp:
  - name: TPermission
  - name: '['
  - name: ']'
  spec.vb:
  - name: TPermission
  - name: (
  - name: )
- uid: Remora.Discord.API.Abstractions.Objects.DiscordPermission[]
  isExternal: true
  href: Remora.Discord.API.Abstractions.Objects.DiscordPermission.html
  name: DiscordPermission[]
  nameWithType: DiscordPermission[]
  fullName: Remora.Discord.API.Abstractions.Objects.DiscordPermission[]
  nameWithType.vb: DiscordPermission()
  fullName.vb: Remora.Discord.API.Abstractions.Objects.DiscordPermission()
  name.vb: DiscordPermission()
  spec.csharp:
  - uid: Remora.Discord.API.Abstractions.Objects.DiscordPermission
    name: DiscordPermission
    href: Remora.Discord.API.Abstractions.Objects.DiscordPermission.html
  - name: '['
  - name: ']'
  spec.vb:
  - uid: Remora.Discord.API.Abstractions.Objects.DiscordPermission
    name: DiscordPermission
    href: Remora.Discord.API.Abstractions.Objects.DiscordPermission.html
  - name: (
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: Remora.Discord.Commands.Conditions
  commentId: N:Remora.Discord.Commands.Conditions
  href: Remora.html
  name: Remora.Discord.Commands.Conditions
  nameWithType: Remora.Discord.Commands.Conditions
  fullName: Remora.Discord.Commands.Conditions
  spec.csharp:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Conditions
    name: Conditions
    href: Remora.Discord.Commands.Conditions.html
  spec.vb:
  - uid: Remora
    name: Remora
    href: Remora.html
  - name: .
  - uid: Remora.Discord
    name: Discord
    href: Remora.Discord.html
  - name: .
  - uid: Remora.Discord.Commands
    name: Commands
    href: Remora.Discord.Commands.html
  - name: .
  - uid: Remora.Discord.Commands.Conditions
    name: Conditions
    href: Remora.Discord.Commands.Conditions.html
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsAdministratorPermission*
  commentId: Overload:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsAdministratorPermission
  href: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.html#Remora_Discord_Commands_Tests_Conditions_RequireBotPermissionsConditionTests_RespectsAdministratorPermission__1_Remora_Discord_Commands_Conditions_LogicalOperator___0___Remora_Discord_API_Abstractions_Objects_DiscordPermission___System_Boolean_
  name: RespectsAdministratorPermission
  nameWithType: RequireBotPermissionsConditionTests.RespectsAdministratorPermission
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.RespectsAdministratorPermission
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions*
  commentId: Overload:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions
  href: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.html#Remora_Discord_Commands_Tests_Conditions_RequireBotPermissionsConditionTests_ReturnsCorrectResultForRolePermissions__1_Remora_Discord_Commands_Conditions_LogicalOperator___0___Remora_Discord_API_Abstractions_Objects_DiscordPermission___System_Boolean_
  name: ReturnsCorrectResultForRolePermissions
  nameWithType: RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForRolePermissions
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite*
  commentId: Overload:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite
  href: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.html#Remora_Discord_Commands_Tests_Conditions_RequireBotPermissionsConditionTests_ReturnsCorrectResultForChannelRoleOverwrite__1_Remora_Discord_Commands_Conditions_LogicalOperator___0___Remora_Discord_API_Abstractions_Objects_DiscordPermission___System_Boolean_
  name: ReturnsCorrectResultForChannelRoleOverwrite
  nameWithType: RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelRoleOverwrite
- uid: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite*
  commentId: Overload:Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite
  href: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.html#Remora_Discord_Commands_Tests_Conditions_RequireBotPermissionsConditionTests_ReturnsCorrectResultForChannelMemberOverwrite__1_Remora_Discord_Commands_Conditions_LogicalOperator___0___Remora_Discord_API_Abstractions_Objects_DiscordPermission___System_Boolean_
  name: ReturnsCorrectResultForChannelMemberOverwrite
  nameWithType: RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite
  fullName: Remora.Discord.Commands.Tests.Conditions.RequireBotPermissionsConditionTests.ReturnsCorrectResultForChannelMemberOverwrite
